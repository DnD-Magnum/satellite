#!/usr/bin/env php
<?php

use Kiboko\Component\ETL\Satellite\Docker\Dockerfile;
use Kiboko\Component\ETL\Satellite\Docker\Asset;
use Kiboko\Component\ETL\Satellite\Docker\File;

require __DIR__ . '/../vendor/autoload.php';

$satellite = new \Kiboko\Component\ETL\Satellite\Docker\Satellite(
    'kiboko/satellite:test',
    new Dockerfile(
        new Dockerfile\From('kiboko/php:7.4-cli'),
        new Dockerfile\Run(<<<RUN
        set -ex \\
            && apk add docker zeromq-dev \\
            && apk add --virtual .build-deps autoconf git \$PHPIZE_DEPS \\
            && git clone https://github.com/gplanchat/php-zmq.git \\
            && cd php-zmq \\
            && phpize \\
            && autoconf \\
            && ./configure \\
            && make \\
            && make install \\
            && cd - \\
            && echo "extension=zmq.so" > /usr/local/etc/php/conf.d/zmq.ini \\
            && apk del .build-deps
        RUN),
        new Dockerfile\Run(<<<RUN
        set -ex \\
            && mkdir -p /app \\
            && cd /app \\
            && composer require ramsey/uuid
        RUN),
        new Dockerfile\Workdir('/app/'),
        new Dockerfile\Copy('main.php', '/app/main.php'),
        new Dockerfile\Copy('function.php', '/app/function.php'),
        new Dockerfile\Cmd('php main.php tcp://host.docker.internal:5557 tcp://host.docker.internal:5559'),
        ...Dockerfile\Copy::directory(__DIR__ . '/../src/', '/app/library/'),
    ),
    new File('main.php', new Asset\File(__DIR__ . '/../src/Docker/Runtime/main.php')),
    new File('function.php', new Asset\InMemory(<<<SOURCE
        <?php
        
        use Kiboko\\Component\\ETL\\Satellite\\ZMQ\\Consumer;
        
        return function(\\JsonSerializable \$request) {
            var_dump(\$request->getUuid(), \$request->getPayload());

            return new class(['success' => true, \$request->getUuid()]) implements \JsonSerializable {
                public array \$payload;

                public function __construct(array \$payload)
                {
                    \$this->payload = \$payload;
                }

                public function jsonSerialize()
                {
                    return \$this->payload;
                }
            };
        };
        SOURCE
    )),
    ...File::directory(__DIR__ . '/../src/'),
);
$logger = new class implements \Psr\Log\LoggerInterface {
    public function emergency($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::EMERGENCY, $message, $context);
    }

    public function alert($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::ALERT, $message, $context);
    }

    public function critical($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::CRITICAL, $message, $context);
    }

    public function error($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::ERROR, $message, $context);
    }

    public function warning($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::WARNING, $message, $context);
    }

    public function notice($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::NOTICE, $message, $context);
    }

    public function info($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::INFO, $message, $context);
    }

    public function debug($message, array $context = array())
    {
        $this->log(Psr\Log\LogLevel::DEBUG, $message, $context);
    }

    public function log($level, $message, array $context = array())
    {
        $prefix = sprintf(PHP_EOL . "[%s] ", strtoupper($level));
        fwrite(STDERR, $prefix . str_replace(PHP_EOL, $prefix, rtrim($message, PHP_EOL)));
    }
};

$satellite->build($logger);
$satellite->start($logger);
$satellite->poll($logger);

while (true) {
    $logger->debug('Sending a message to consumer.' . PHP_EOL);
    $satellite
        ->send(new class implements \JsonSerializable {
            public function jsonSerialize()
            {
                return ['lorem' => ['ipsum', 'dolor'], new DateTimeImmutable()];
            }
        })
        ->then(function ($result) {
            var_dump(['result' => $result]);
        });

    $satellite->poll($logger);

    usleep(1000000);
}